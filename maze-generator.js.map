{"version":3,"file":"maze-generator.js","mappings":"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","sources":["webpack://maze-generator/webpack/bootstrap","webpack://maze-generator/webpack/runtime/define property getters","webpack://maze-generator/webpack/runtime/hasOwnProperty shorthand","webpack://maze-generator/webpack/runtime/make namespace object","webpack://maze-generator/./src/tile-types.js","webpack://maze-generator/./src/random.js","webpack://maze-generator/./src/room/build.js","webpack://maze-generator/./src/region-splitter/rough.js","webpack://maze-generator/./src/region-splitter/standard.js","webpack://maze-generator/./src/region-splitter/classic.js","webpack://maze-generator/./src/perlin-noise.js","webpack://maze-generator/./src/maze.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const Route = 0x01;\nexport const Room = 0x02;\nexport const Door = 0x04;\nexport const Border = 0x08;\nexport const Grass = 0x10;\nexport const Water = 0x20;\n\nexport const Pass = 0x80;\nexport const Light = 0x100;","export default class Random {\n\tstatic int0(max) { return Math.random() * max | 0; }\n\tstatic int(max) { return this.int0(1 + max); }\n\tstatic range(min, max) { return min + this.int(max - min); }\n\tstatic p(percent) { return this.range(0, 99) < percent; }\n\tstatic coinToss() { return Math.random() < .5; }\n\n\tstatic shuffle(array) {\n\t\tfor (let i = 0; i < array.length; ++i) {\n\t\t\tconst j = this.int0(array.length);\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\n\t\t}\n\t\treturn array;\n\t}\n\tstatic randomChoice(array) { return array[this.int0(array.length)]; }\n}\n","import Random from '/src/random.js';\nimport * as Tile from '/src/tile-types.js';\n\nexport const Direction = {\n\tFree: 0,\n\tHorizon: 1,\n\tVertical: 2\n};\n\nexport class Data {\n\tconstructor(id, left, top, right, bottom) {\n\t\tthis.id = id;\n\t\tthis.left = left;\n\t\tthis.top = top;\n\t\tthis.right = right;\n\t\tthis.bottom = bottom;\n\t\tthis.connectedRoom = [];\n\t\tthis.step = -1;\n\t}\n\n\tisConnected(id) { return this.connectedRoom.indexOf(id) != -1; }\n}\n\nexport class Node {\n\tconstructor(dir, room1, room2 = -1, parent = -1) {\n\t\tthis.dir = dir;\n\t\tthis.room1 = room1;\n\t\tthis.room2 = room2;\n\t\tthis.parent = parent;\n\t}\n}\n\nexport function build(field, x1, y1, x2, y2) {\n\tfor (let y = y1; y <= y2; ++y)\n\t\tfor (let x = x1; x <= x2; ++x)\n\t\t\tfield[y][x] |= Tile.Route | Tile.Room;\n}\n\n/**\n * Adjusts the rectangle so that it fits within the specified coordinates.\n * @param {Number} x1 \n * @param {Number} y1 \n * @param {Number} x2 \n * @param {Number} y2 \n * @returns adjusted coordinates\n */\nexport function adjustRect(x1, y1, x2, y2) {\n\tconst ROOM_WIDTH = 5;\n\n\tx1 += 2;\n\ty1 += 2;\n\tx2 -= 2;\n\ty2 -= 2;\n\n\t// Determine the location and size of the room in the region.\n\tlet w = x2 - x1;\n\tlet h = y2 - y1;\n\n\tif (w - ROOM_WIDTH > 0) {\n\t\tconst ww = Random.range(ROOM_WIDTH, w);\n\t\tx1 += Random.int(w - ww);\n\t\tx2 = x1 + ww;\n\t\tw = ww;\n\t}\n\tif (h - ROOM_WIDTH > 0) {\n\t\tconst wh = Random.range(ROOM_WIDTH, h);\n\t\ty1 += Random.int(h - wh);\n\t\ty2 = y1 + wh;\n\t\th = wh;\n\t}\n\n\t// Correct the size of the room so that it is not too long either vertically or horizontally.\n\tif (w >= h && w > h * 3) {\n\t\tlet ww = h * 3;\n\t\tlet ws = (w - ww) / 2 | 0;\n\t\tx1 += ws;\n\t\tx2 = x1 + ww;\n\t} else if (h > w * 3) {\n\t\tlet wh = w * 3;\n\t\tlet ws = (h - wh) / 2 | 0;\n\t\ty1 += ws;\n\t\ty2 = y1 + wh;\n\t}\n\n\treturn [x1, y1, x2, y2];\n}\n\n/**\n * Connecting the two rooms.\n * @param {Array[][]} field \n * @param {Data} room1 \n * @param {Data} room2 \n * @param {Direction} dir \n * @param {Tile} door \n */\nexport function connect(field, room1, room2, dir, door = 0) {\n\tlet x1, x2;\n\tlet y1, y2;\n\n\tif (dir == Direction.Horizon) {\n\t\tx1 = room1.right + 1;\n\t\tx2 = room2.left - 1;\n\t\tif (x2 - x1 >= 2) {\n\t\t\ty1 = Random.range(room1.top, room1.bottom);\n\t\t\ty2 = Random.range(room2.top, room2.bottom);\n\t\t} else {\n\t\t\ty1 = room1.top > room2.top ? room1.top : room2.top;\n\t\t\ty2 = room1.bottom < room2.bottom ? room1.bottom : room2.bottom;\n\t\t\ty1 = y2 = Random.range(y1, y2);\n\t\t}\n\t\tfield[y1][x1] |= Tile.Route | door;\n\t\tfield[y2][x2] |= Tile.Route | door;\n\t\t++x1;\n\t\t--x2;\n\t\tlet x = x1;\n\t\tfor (; ; ++x) {\n\t\t\tfield[y1][x] |= Tile.Route;\n\t\t\tif (field[y1][x] & Tile.Border)\n\t\t\t\tbreak;\n\t\t}\n\t\tconst border = x;\n\t\tfor (; x <= x2; ++x)\n\t\t\tfield[y2][x] |= Tile.Route;\n\t\tif (y1 > y2)\n\t\t\t[y1, y2] = [y2, y1];\n\t\tfor (let y = y1; y <= y2; ++y)\n\t\t\tfield[y][border] |= Tile.Route;\n\t} else if (dir == Direction.Vertical) {\n\t\ty1 = room1.bottom + 1;\n\t\ty2 = room2.top - 1;\n\t\tif (y2 - y1 >= 2) {\n\t\t\tx1 = Random.range(room1.left, room1.right);\n\t\t\tx2 = Random.range(room2.left, room2.right);\n\t\t} else {\n\t\t\tx1 = room1.left > room2.left ? room1.left : room2.left;\n\t\t\tx2 = room1.right < room2.right ? room1.right : room2.right;\n\t\t\tx1 = x2 = Random.range(x1, x2);\n\t\t}\n\t\tfield[y1][x1] |= Tile.Route | door;\n\t\tfield[y2][x2] |= Tile.Route | door;\n\t\t++y1;\n\t\t--y2;\n\t\tlet y = y1;\n\t\tfor (; ; ++y) {\n\t\t\tfield[y][x1] |= Tile.Route;\n\t\t\tif (field[y][x1] & Tile.Border)\n\t\t\t\tbreak;\n\t\t}\n\t\tconst border = y;\n\t\tfor (; y <= y2; ++y)\n\t\t\tfield[y][x2] |= Tile.Route;\n\t\tif (x1 > x2)\n\t\t\t[x1, x2] = [x2, x1];\n\t\tfor (let x = x1; x <= x2; ++x)\n\t\t\tfield[border][x] |= Tile.Route;\n\t}\n\n\troom1.connectedRoom.push(room2.id);\n\troom2.connectedRoom.push(room1.id);\n}","import Random from '/src/random.js';\nimport * as Tile from '/src/tile-types.js';\nimport * as Room from '/src/room/build.js';\n\nexport default function splitRegion(maze, x1, y1, x2, y2, depth = 0) {\n\tconst w = x2 - x1;\n\tconst h = y2 - y1;\n\n\tif (w < 10 || h < 10 || Random.p(depth))\n\t\treturn readyRoom(maze, x1, y1, x2, y2);\n\n\t++depth;\n\n\tif (w >= h) {\n\t\tconst border = Random.range(x1 + 5, x2 - 5);\n\t\tconst room1 = splitRegion(maze, x1, y1, border - 1, y2, depth);\n\t\tconst room2 = splitRegion(maze, border + 1, y1, x2, y2, depth);\n\n\t\tif (!room1 && !room2) return null;\n\t\telse if (!room1) return room2;\n\t\telse if (!room2) return room1;\n\n\t\t//connect\n\t\tconst i = Random.range(room1[1] + 1, room1[3] - 1);\n\t\tconst j = Random.range(room2[1] + 1, room2[3] - 1);\n\t\tconst d = j > i ? 1 : -1;\n\n\t\tfor (let x = room1[2]; x <= border; ++x)\n\t\t\tmaze.field[i][x] |= Tile.Route;\n\t\tmaze.field[i][room1[2]] |= Tile.Door;\n\t\tfor (let x = border; x <= room2[0]; ++x)\n\t\t\tmaze.field[j][x] |= Tile.Route;\n\t\tmaze.field[j][room2[0]] |= Tile.Door;\n\t\tif (j != i)\n\t\t\tfor (let y = i; y != j; y += d)\n\t\t\t\tmaze.field[y][border] |= Tile.Route;\n\n\t\treturn Random.coinToss() ? room1 : room2;\n\t} else {\n\t\tconst border = Random.range(y1 + 5, y2 - 5);\n\t\tconst room1 = splitRegion(maze, x1, y1, x2, border - 1, depth);\n\t\tconst room2 = splitRegion(maze, x1, border + 1, x2, y2, depth);\n\n\t\tif (!room1 && !room2) return null;\n\t\telse if (!room1) return room2;\n\t\telse if (!room2) return room1;\n\n\t\t//connect\n\t\tconst i = Random.range(room1[0] + 1, room1[2] - 1);\n\t\tconst j = Random.range(room2[0] + 1, room2[2] - 1);\n\t\tconst d = j > i ? 1 : -1;\n\n\t\tfor (let y = room1[3]; y <= border; ++y)\n\t\t\tmaze.field[y][i] |= Tile.Route;\n\t\tmaze.field[room1[3]][i] |= Tile.Door;\n\t\tfor (let y = border; y <= room2[1]; ++y)\n\t\t\tmaze.field[y][j] |= Tile.Route;\n\t\tmaze.field[room2[1]][j] |= Tile.Door;\n\t\tif (j != i)\n\t\t\tfor (let x = i; x != j; x += d)\n\t\t\t\tmaze.field[border][x] |= Tile.Route;\n\n\t\treturn Random.coinToss() ? room1 : room2;\n\t}\n}\n\nfunction readyRoom(maze, x1, y1, x2, y2) {\n\tconst width = x2 - x1;\n\tconst height = y2 - y1;\n\tif (width < 4 || height < 4) {\n\t\tconsole.error(`failed makeRoom: width:${width}, height:${height} [${x1}, ${y1}]-[${x2}, ${y2}]`);\n\t\treturn null;\n\t}\n\n\tconst w = (width > 4) ? Random.range(4, width) : width;\n\tconst h = (height > 4) ? Random.range(4, height) : height;\n\tconst x = Random.range(0, width - w) + x1;\n\tconst y = Random.range(0, height - h) + y1;\n\tRoom.build(maze.field, x + 1, y + 1, x + w - 1, y + h - 1);\n\treturn [x, y, x + w, y + h];\n}\n","import Random from '/src/random.js';\nimport * as Tile from '/src/tile-types.js';\nimport * as Room from '/src/room/build.js';\n\nexport default function splitRegion(maze, x1, y1, x2, y2, depth = 0) {\n\tif (depth > 3)\n\t\treturn readyRoom(maze, x1, y1, x2, y2);\n\n\tconst v = Math.random();\n\tconst w = x2 - x1;\n\tconst h = y2 - y1;\n\n\tif (w >= h) {\n\t\tif (w < 15)\n\t\t\treturn readyRoom(maze, x1, y1, x2, y2);\n\n\t\tconst border = ((w - 10) * v | 0) + 5 + x1;\n\t\tconst room1 = splitRegion(maze, x1, y1, border, y2, depth + 1);\n\t\tconst room2 = splitRegion(maze, border, y1, x2, y2, depth + 1);\n\n\t\tfor (let y = y1; y <= y2; ++y)\n\t\t\tmaze.field[y][border] |= Tile.Border;\n\n\t\treturn connectRoom(maze, room1, room2, Room.Direction.Horizon);\n\t} else {\n\t\tif (h < 15)\n\t\t\treturn readyRoom(maze, x1, y1, x2, y2);\n\n\t\tconst border = ((h - 10) * v | 0) + 5 + y1;\n\t\tconst room1 = splitRegion(maze, x1, y1, x2, border, depth + 1);\n\t\tconst room2 = splitRegion(maze, x1, border, x2, y2, depth + 1);\n\n\t\tfor (let x = x1; x <= x2; ++x)\n\t\t\tmaze.field[border][x] |= Tile.Border;\n\n\t\treturn connectRoom(maze, room1, room2, Room.Direction.Vertical);\n\t}\n}\n\n/**\n * Create a room that fits within the specified coordinates.\n * \n * @param {*} maze \n * @param {*} x1 \n * @param {*} y1 \n * @param {*} x2 \n * @param {*} y2 \n * @returns node-number\n */\nfunction readyRoom(maze, x1, y1, x2, y2) {\n\t[x1, y1, x2, y2] = Room.adjustRect(x1, y1, x2, y2);\n\tRoom.build(maze.field, x1, y1, x2, y2);\n\treturn maze.addRoom(x1, y1, x2, y2);\n}\n\n/**\n * Connecting the two rooms.\n * @param {*} maze \n * @param {*} room1 first node no\n * @param {*} room2 second node no\n * @param {*} dir \n * @returns node-number\n */\nfunction connectRoom(maze, room1, room2, dir) {\n\tlet node1 = maze.getRoomNode(room1);\n\tlet node2 = maze.getRoomNode(room2);\n\n\tconst nodeNo = maze.addRoomNode(new Room.Node(dir, room1, room2));\n\tnode1.parent = nodeNo;\n\tnode2.parent = nodeNo;\n\n\twhile (node1.dir != Room.Direction.Free)\n\t\tnode1 = maze.getRoomNode(node1.dir == dir ? node1.room2 : Random.coinToss() ? node1.room1 : node1.room2);\n\twhile (node2.dir != Room.Direction.Free)\n\t\tnode2 = maze.getRoomNode(node2.dir == dir ? node2.room1 : Random.coinToss() ? node2.room1 : node2.room2);\n\tconst r1 = maze.getRoom(node1.room1);\n\tconst r2 = maze.getRoom(node2.room1);\n\n\tRoom.connect(maze.field, r1, r2, dir, Tile.Door);\n\n\treturn nodeNo;\n}\n","import Random from '/src/random.js';\nimport * as Tile from '/src/tile-types.js';\nimport * as Room from '/src/room/build.js';\n\nexport default function splitRegion(maze, x1, y1, x2, y2) {\n\tconst w = x2 - x1;\n\tconst h = y2 - y1;\n\n\tconst cellW = w / 3 | 0;\n\tconst cellH = h / 3 | 0;\n\n\tconst borderV1 = x1 + cellW;\n\tconst borderV2 = x2 - cellW;\n\tconst borderH1 = y1 + cellH;\n\tconst borderH2 = y2 - cellH;\n\n\tconst regions = [\n\t\t[x1, y1, borderV1, borderH1],\n\t\t[borderV1, y1, borderV2, borderH1],\n\t\t[borderV2, y1, x2, borderH1],\n\t\t[x1, borderH1, borderV1, borderH2],\n\t\t[borderV1, borderH1, borderV2, borderH2],\n\t\t[borderV2, borderH1, x2, borderH2],\n\t\t[x1, borderH2, borderV1, y2],\n\t\t[borderV1, borderH2, borderV2, y2],\n\t\t[borderV2, borderH2, x2, y2],\n\t];\n\n\tfor (; ;)\n\t\ttry {\n\t\t\tfor (let x = x1; x <= x2; ++x) {\n\t\t\t\tmaze.field[borderH1][x] |= Tile.Border;\n\t\t\t\tmaze.field[borderH2][x] |= Tile.Border;\n\t\t\t}\n\t\t\tfor (let y = y1; y <= y2; ++y) {\n\t\t\t\tmaze.field[y][borderV1] |= Tile.Border;\n\t\t\t\tmaze.field[y][borderV2] |= Tile.Border;\n\t\t\t}\n\n\t\t\tconnectAllRooms(maze, setupRooms(maze, regions));\n\t\t\tbreak;\n\t\t} catch (e) {\n\t\t\tconsole.debug(e.stack);\n\t\t\tmaze.clear();\n\t\t}\n}\n\n/**\n * Set up a room in each of the divided cells.\n * @param {*} maze \n * @param {*} regions \n * @returns \n */\nfunction setupRooms(maze, regions) {\n\t// cell no:\n\t//  0|1|2\n\t//  -+-+-\n\t//  3|4|5\n\t//  -+-+-\n\t//  6|7|8\n\tconst cells = Random.shuffle([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n\n\t// There are up to four cells with no rooms.\n\tcells.length = Random.range(cells.length - 4, cells.length);\n\n\tconst horizonGroup = [\n\t\t[1, 2], [0, 2], [0, 1],\n\t\t[4, 5], [3, 5], [3, 4],\n\t\t[7, 8], [6, 8], [6, 7],\n\t];\n\tconst connectionTarget = [\n\t\t[[1, 2], [3, 6]], [[0], [2], [4, 7]], [[1, 0], [5, 8]],\n\t\t[[4, 5], [0], [6]], [[3], [5], [1], [7]], [[4, 3], [2], [8]],\n\t\t[[7, 8], [3, 0]], [[6], [8], [4, 1]], [[7, 6], [5, 2]],\n\t];\n\n\tconst rooms = {};\n\tfor (const no of cells) {\n\t\tconst region = regions[no];\n\t\tconst nodeNo = readyRoom(maze, region[0], region[1], region[2], region[3]);\n\t\tconst data = maze.getRoomByNodeNo(nodeNo);\n\t\trooms[no] = {\n\t\t\tcellNo: no,\n\t\t\tid: data.id,\n\t\t\tdata,\n\t\t\thorizonGroup: horizonGroup[no],\n\t\t\tconnectionTarget: connectionTarget[no]\n\t\t};\n\t}\n\treturn rooms;\n}\n\n/**\n * Create a room that fits within the specified coordinates.\n * @param {*} maze \n * @param {*} x1 \n * @param {*} y1 \n * @param {*} x2 \n * @param {*} y2 \n * @returns node-number\n */\nfunction readyRoom(maze, x1, y1, x2, y2) {\n\t[x1, y1, x2, y2] = Room.adjustRect(x1, y1, x2, y2);\n\tRoom.build(maze.field, x1, y1, x2, y2);\n\treturn maze.addRoom(x1, y1, x2, y2);\n}\n\n/**\n * Connecting the all rooms.\n * @param {*} maze \n * @param {*} rooms \n */\nfunction connectAllRooms(maze, rooms) {\n\tconst targetChoice = (rooms, room) => {\n\t\tconst result = [];\n\t\tlet connectedAlready = false;\n\t\tfor (const target of room.connectionTarget)\n\t\t\tfor (const cellNo of target)\n\t\t\t\tif (cellNo in rooms) {\n\t\t\t\t\tconst targetRoom = rooms[cellNo];\n\t\t\t\t\tif (!targetRoom.data.isConnected(room.data.id))\n\t\t\t\t\t\tresult.push({ cellNo, id: targetRoom.id });\n\t\t\t\t\telse connectedAlready = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\tif (!result.length) {\n\t\t\tif (connectedAlready)\n\t\t\t\treturn undefined;\n\t\t\tthrow new TypeError('No connection cell.');\n\t\t}\n\t\treturn Random.randomChoice(result);\n\t};\n\tconst connect = room => {\n\t\tconst choice = targetChoice(rooms, room);\n\t\tif (!choice)\n\t\t\treturn false;\n\t\tconst dir = (room.horizonGroup.indexOf(choice.cellNo) != -1) ? Room.Direction.Horizon : Room.Direction.Vertical;\n\t\tconnectRoom(maze, room.id, choice.id, dir);\n\t\t// console.debug(`connect cell: ${room.cellNo} - ${choice.cellNo}`);\n\t\treturn true;\n\t};\n\n\t// console.groupCollapsed('classic field');\n\tfor (const room of Object.values(rooms))\n\t\tconnect(room);\n\t// console.groupEnd();\n\n\t// Measures for unconnected room groups.\n\tconst searchCellByRoomId = id => {\n\t\tfor (const room of Object.values(rooms))\n\t\t\tif (id == room.data.id)\n\t\t\t\treturn room.cellNo;\n\t\tthrow new RangeError('Not found cell.')\n\t};\n\tconst recursiveConnection = (group, data) => {\n\t\tfor (const id of data.connectedRoom) {\n\t\t\tconst cellNo = searchCellByRoomId(id);\n\t\t\tif (group.indexOf(cellNo) != -1)\n\t\t\t\tcontinue;\n\t\t\tgroup.push(cellNo);\n\t\t\trecursiveConnection(group, maze.getRoom(id));\n\t\t}\n\t};\n\tconst initCellGroup = () => {\n\t\tconst room = Object.values(rooms)[0];\n\t\tconst group = [room.cellNo];\n\t\trecursiveConnection(group, room.data);\n\t\treturn group;\n\t};\n\n\t// console.group('classic field - unconnected');\n\tconst group = initCellGroup();\n\tfor (const cellNo of Random.shuffle(Object.keys(rooms))) {\n\t\tif (group.indexOf(cellNo | 0) == -1) {\n\t\t\tconst room = rooms[cellNo];\n\t\t\tif (!connect(room))\n\t\t\t\tcontinue;\n\t\t\tgroup.push(cellNo | 0);\n\t\t\trecursiveConnection(group, room.data);\n\t\t}\n\t}\n\t// console.groupEnd();\n}\n\n/**\n * Connecting the two rooms.\n * @param {*} maze \n * @param {*} room1 first room id\n * @param {*} room2 second room id\n * @param {*} dir \n */\nfunction connectRoom(maze, room1, room2, dir) {\n\tlet r1 = maze.getRoom(room1);\n\tlet r2 = maze.getRoom(room2);\n\tlet exchange = false;\n\n\tif (dir == Room.Direction.Horizon) {\n\t\tconst c1 = (r1.right - r1.left) / 2 + r1.left;\n\t\tconst c2 = (r2.right - r2.left) / 2 + r2.left;\n\t\texchange = c2 < c1;\n\t} else if (dir == Room.Direction.Vertical) {\n\t\tconst c1 = (r1.bottom - r1.top) / 2 + r1.top;\n\t\tconst c2 = (r2.bottom - r2.top) / 2 + r2.top;\n\t\texchange = c2 < c1;\n\t}\n\n\tif (exchange)\n\t\t[r1, r2] = [r2, r1];\n\n\tRoom.connect(maze.field, r1, r2, dir);\n}\n","export default class PerlinNoise {\n\tstatic get makePermutation() {\n\t\tconst base = [...Array(256)].map((v, i) => i);\n\t\tfor (const i in base) {\n\t\t\tconst j = Math.random() * base.length | 0;\n\t\t\t[base[i], base[j]] = [base[j], base[i]];\n\t\t}\n\t\treturn base.concat(base);\n\t}\n\n\tstatic value(permutation, x, y = 0, z = 0) {\n\t\tconst fade = t => t * t * t * (t * (t * 6 - 15) + 10);\n\t\tconst lerp = (t, a, b) => a + t * (b - a);\n\t\tconst grad = (hash, x, y, z) => {\n\t\t\thash &= 0xf;\n\t\t\tconst u = hash < 8 ? x : y;\n\t\t\tconst v = hash < 4 ? y : hash == 12 || hash == 14 ? x : z;\n\t\t\treturn ((hash & 0x1) === 0 ? u : -u) + ((hash & 0x2) === 0 ? v : -v);\n\t\t};\n\n\t\tconst xi = x & 0xff;\n\t\tconst yi = y & 0xff;\n\t\tconst zi = z & 0xff;\n\t\tconst xf = x - (x | 0);\n\t\tconst yf = y - (y | 0);\n\t\tconst zf = z - (z | 0);\n\t\tconst u = fade(xf);\n\t\tconst v = fade(yf);\n\t\tconst w = fade(zf);\n\n\t\tconst p = permutation;\n\t\tconst A = p[xi + 0] + yi, AA = p[A] + zi, AB = p[A + 1] + zi;\n\t\tconst B = p[xi + 1] + yi, BA = p[B] + zi, BB = p[B + 1] + zi;\n\n\t\treturn lerp(w,\n\t\t\tlerp(v,\n\t\t\t\tlerp(u, grad(p[AA], xf, yf, zf), grad(p[BA], xf - 1, yf, zf)),\n\t\t\t\tlerp(u, grad(p[AB], xf, yf - 1, zf), grad(p[BB], xf - 1, yf - 1, zf))\n\t\t\t),\n\t\t\tlerp(v,\n\t\t\t\tlerp(u, grad(p[AA + 1], xf, yf, zf - 1), grad(p[BA + 1], xf - 1, yf, zf - 1)),\n\t\t\t\tlerp(u, grad(p[AB + 1], xf, yf - 1, zf - 1), grad(p[BB + 1], xf - 1, yf - 1, zf - 1))\n\t\t\t)\n\t\t);\n\t}\n\n\tstatic octaveValue(permutation, x, y = 0, z = 0, octaves = 1, persistence = 0.5) {\n\t\tlet total = 0;\n\t\tlet frequency = 1;\n\t\tlet amplitude = 1;\n\t\tlet maxValue = 0;\n\n\t\tfor (let i = 0; i < octaves; ++i) {\n\t\t\ttotal += this.value(permutation, x * frequency, y * frequency, z * frequency) * amplitude;\n\t\t\tmaxValue += amplitude;\n\t\t\tamplitude *= persistence;\n\t\t\tfrequency *= 2;\n\t\t}\n\n\t\treturn total / maxValue;\n\t}\n}","import * as Tile from './tile-types.js';\nimport * as Room from './room/build.js';\nimport SplitterRough from './region-splitter/rough.js';\nimport Splitter from './region-splitter/standard.js';\nimport SplitterClassic from './region-splitter/classic.js';\nimport PerlinNoise from './perlin-noise.js';\n\nexport default class Maze {\n\t#width = 0;\n\t#height = 0;\n\t#field = null;\n\n\t#rooms = [];\n\t#roomTree = [];\n\n\tconstructor(width, height) {\n\t\tthis.#width = width;\n\t\tthis.#height = height;\n\t\tthis.#field = new Array(height);\n\t\tfor (let y = 0; y < height; ++y)\n\t\t\tthis.#field[y] = new Array(width);\n\t}\n\n\tget width() { return this.#width; }\n\tget height() { return this.#height; }\n\tget field() { return this.#field; }\n\tget(x, y) { return this.#field[y][x]; }\n\tat(offset) { return this.#field[offset / this.#width | 0][offset % this.#width]; }\n\n\tbuild(type) {\n\t\tthis.clear();\n\n\t\tswitch (type) {\n\t\t\tcase 'rough': SplitterRough(this, 0, 0, this.#width - 1, this.#height - 1); break;\n\t\t\tcase 'classic': SplitterClassic(this, 0, 0, this.#width - 1, this.#height - 1); break;\n\t\t\tdefault: Splitter(this, 0, 0, this.#width - 1, this.#height - 1); break;\n\t\t}\n\t}\n\n\theightMap(wScale = 4, hScale = 4, upBorder = .25, upTile = Tile.Grass, downBorder = -.25, downTile = Tile.Water) {\n\t\tconst table = PerlinNoise.makePermutation;\n\t\tfor (let y = 0; y < this.#height; ++y)\n\t\t\tfor (let x = 0; x < this.#width; ++x)\n\t\t\t\tif (this.#field[y][x] & (Tile.Route | Tile.Room)) {\n\t\t\t\t\tconst n = PerlinNoise.octaveValue(table, x / this.#width * wScale, y / this.#height * hScale, 0, 4);\n\t\t\t\t\tif (n > upBorder) this.#field[y][x] |= upTile;\n\t\t\t\t\telse if (n < downBorder) this.#field[y][x] |= downTile;\n\t\t\t\t}\n\t}\n\n\tclear() {\n\t\tthis.#rooms = [];\n\t\tthis.#roomTree = [];\n\t\tfor (let y = 0; y < this.#height; ++y)\n\t\t\tfor (let x = 0; x < this.#width; ++x)\n\t\t\t\tthis.#field[y][x] = 0;\n\t}\n\n\tgetRoom(id) { return this.#rooms[id]; }\n\taddRoom(x1, y1, x2, y2) {\n\t\tconst id = this.#rooms.length;\n\t\tthis.#rooms.push(new Room.Data(id, x1, y1, x2, y2));\n\t\treturn this.addRoomNode(new Room.Node(Room.Direction.Free, id));\n\t}\n\n\tgetRoomNode(no) { return this.#roomTree[no]; }\n\taddRoomNode(roomNode) {\n\t\tconst nodeNo = this.#roomTree.length;\n\t\tthis.#roomTree.push(roomNode);\n\t\treturn nodeNo;\n\t}\n\n\tgetRoomByNodeNo(nodeNo) {\n\t\tconst node = this.getRoomNode(nodeNo);\n\t\tif (node.dir != Room.Direction.Free)\n\t\t\tthrow new TypeError('Not room node.');\n\t\treturn this.getRoom(node.room1);\n\t}\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Route","Room","Door","Border","Grass","Water","Pass","Light","Random","static","max","Math","random","this","int0","min","int","percent","range","array","i","length","j","Data","constructor","id","left","top","right","bottom","connectedRoom","step","isConnected","indexOf","Node","dir","room1","room2","parent","build","field","x1","y1","x2","y2","y","x","adjustRect","w","h","ww","wh","connect","door","border","push","splitRegion","maze","depth","p","width","height","console","error","readyRoom","d","coinToss","v","connectRoom","addRoom","node1","getRoomNode","node2","nodeNo","addRoomNode","r1","getRoom","r2","setupRooms","regions","cells","shuffle","horizonGroup","connectionTarget","rooms","no","region","data","getRoomByNodeNo","cellNo","connectAllRooms","room","choice","result","connectedAlready","target","targetRoom","TypeError","randomChoice","targetChoice","values","searchCellByRoomId","RangeError","recursiveConnection","group","initCellGroup","keys","exchange","c1","PerlinNoise","makePermutation","base","Array","map","concat","permutation","z","fade","t","lerp","a","b","grad","hash","u","xi","yi","zi","xf","yf","zf","A","AA","AB","B","BA","BB","octaves","persistence","total","frequency","amplitude","maxValue","Maze","at","offset","type","clear","cellW","cellH","borderV1","borderV2","borderH1","borderH2","e","debug","stack","heightMap","wScale","hScale","upBorder","upTile","downBorder","downTile","table","n","octaveValue","roomNode","node"],"sourceRoot":""}