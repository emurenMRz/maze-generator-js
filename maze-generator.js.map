{"version":3,"file":"maze-generator.js","mappings":"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","sources":["webpack://maze-generator/webpack/bootstrap","webpack://maze-generator/webpack/runtime/define property getters","webpack://maze-generator/webpack/runtime/hasOwnProperty shorthand","webpack://maze-generator/./src/tile-flags.js","webpack://maze-generator/./src/random.js","webpack://maze-generator/./src/room/build.js","webpack://maze-generator/./src/region-splitter/classic.js","webpack://maze-generator/./src/region-splitter/rough.js","webpack://maze-generator/./src/region-splitter/standard.js","webpack://maze-generator/./src/perlin-noise.js","webpack://maze-generator/./src/maze.js","webpack://maze-generator/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export default Object.freeze({\n\tRoute: 0x01,\n\tRoom: 0x02,\n\tDoor: 0x04,\n\tBorder: 0x08,\n\tGrass: 0x10,\n\tWater: 0x20,\n});\n\n","export default class Random {\n\tstatic get value() { return Math.random(); }\n\tstatic get coinToss() { return this.value < .5; }\n\tstatic int0(max) { return this.value * max | 0; }\n\tstatic int1(max) { return this.int0(1 + max); }\n\tstatic range(min, max) { return min + this.int1(max - min); }\n\tstatic P(percent) { return this.range(0, 99) < percent; }\n\n\tstatic shuffle(array) {\n\t\tfor (let i = 0; i < array.length; ++i) {\n\t\t\tconst j = this.int0(array.length);\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\n\t\t}\n\t\treturn array;\n\t}\n\tstatic randomValue(array) { return array[this.int0(array.length)]; }\n}\n","import Random from '/src/random.js';\nimport Flag from \"../tile-flags.js\";\n\nexport const Direction = {\n\tFree: 0,\n\tHorizon: 1,\n\tVertical: 2\n};\n\nexport class Data {\n\tconstructor(id, left, top, right, bottom) {\n\t\tthis.id = id;\n\t\tthis.left = left;\n\t\tthis.top = top;\n\t\tthis.right = right;\n\t\tthis.bottom = bottom;\n\t\tthis.connectedRoom = [];\n\t\tthis.step = -1;\n\t}\n\n\tisConnected(id) { return this.connectedRoom.indexOf(id) != -1; }\n}\n\nexport class Node {\n\tconstructor(dir, room1, room2 = -1, parent = -1) {\n\t\tthis.dir = dir;\n\t\tthis.room1 = room1;\n\t\tthis.room2 = room2;\n\t\tthis.parent = parent;\n\t}\n}\n\nexport function build(field, x1, y1, x2, y2) {\n\tfor (let y = y1; y <= y2; ++y)\n\t\tfor (let x = x1; x <= x2; ++x)\n\t\t\tfield[y][x] |= Flag.Route | Flag.Room;\n}\n\nexport function roughRoom(field, x1, y1, x2, y2) {\n\tfor (let y = y1; y <= y2; ++y)\n\t\tfor (let x = x1; x <= x2; ++x)\n\t\t\tif (Random.P(95))\n\t\t\t\tfield[y][x] |= Flag.Route | Flag.Room;\n}\n\n/**\n * Adjusts the rectangle so that it fits within the specified coordinates.\n * @param {Number} x1 \n * @param {Number} y1 \n * @param {Number} x2 \n * @param {Number} y2 \n * @returns adjusted coordinates\n */\nexport function adjustRect(x1, y1, x2, y2) {\n\tconst ROOM_WIDTH = 5;\n\n\tx1 += 2;\n\ty1 += 2;\n\tx2 -= 2;\n\ty2 -= 2;\n\n\t// Determine the location and size of the room in the region.\n\tlet w = x2 - x1;\n\tlet h = y2 - y1;\n\n\tif (w - ROOM_WIDTH > 0) {\n\t\tconst ww = Random.range(ROOM_WIDTH, w);\n\t\tx1 += Random.int1(w - ww);\n\t\tx2 = x1 + ww;\n\t\tw = ww;\n\t}\n\tif (h - ROOM_WIDTH > 0) {\n\t\tconst wh = Random.range(ROOM_WIDTH, h);\n\t\ty1 += Random.int1(h - wh);\n\t\ty2 = y1 + wh;\n\t\th = wh;\n\t}\n\n\t// Correct the size of the room so that it is not too long either vertically or horizontally.\n\tif (w >= h && w > h * 3) {\n\t\tlet ww = h * 3;\n\t\tlet ws = (w - ww) / 2 | 0;\n\t\tx1 += ws;\n\t\tx2 = x1 + ww;\n\t} else if (h > w * 3) {\n\t\tlet wh = w * 3;\n\t\tlet ws = (h - wh) / 2 | 0;\n\t\ty1 += ws;\n\t\ty2 = y1 + wh;\n\t}\n\n\treturn [x1, y1, x2, y2];\n}\n\n/**\n * Connecting the two rooms.\n * @param {Array[][]} field \n * @param {Data} room1 \n * @param {Data} room2 \n * @param {Direction} dir \n * @param {Flag} door \n */\nexport function connect(field, room1, room2, dir, door = 0) {\n\tlet x1, x2;\n\tlet y1, y2;\n\n\tif (dir == Direction.Horizon) {\n\t\tx1 = room1.right + 1;\n\t\tx2 = room2.left - 1;\n\t\tif (x2 - x1 >= 2) {\n\t\t\ty1 = Random.range(room1.top, room1.bottom);\n\t\t\ty2 = Random.range(room2.top, room2.bottom);\n\t\t} else {\n\t\t\ty1 = room1.top > room2.top ? room1.top : room2.top;\n\t\t\ty2 = room1.bottom < room2.bottom ? room1.bottom : room2.bottom;\n\t\t\ty1 = y2 = Random.range(y1, y2);\n\t\t}\n\t\tfield[y1][x1] |= Flag.Route | door;\n\t\tfield[y2][x2] |= Flag.Route | door;\n\t\t++x1;\n\t\t--x2;\n\t\tlet x = x1;\n\t\tconst row1 = field[y1];\n\t\tfor (; ; ++x) {\n\t\t\trow1[x] |= Flag.Route;\n\t\t\tif (row1[x] & Flag.Border)\n\t\t\t\tbreak;\n\t\t}\n\t\tconst border = x;\n\t\tconst row2 = field[y2];\n\t\tfor (; x <= x2; ++x)\n\t\t\trow2[x] |= Flag.Route;\n\t\tif (y1 > y2)\n\t\t\t[y1, y2] = [y2, y1];\n\t\tfor (let y = y1; y <= y2; ++y)\n\t\t\tfield[y][border] |= Flag.Route;\n\t} else if (dir == Direction.Vertical) {\n\t\ty1 = room1.bottom + 1;\n\t\ty2 = room2.top - 1;\n\t\tif (y2 - y1 >= 2) {\n\t\t\tx1 = Random.range(room1.left, room1.right);\n\t\t\tx2 = Random.range(room2.left, room2.right);\n\t\t} else {\n\t\t\tx1 = room1.left > room2.left ? room1.left : room2.left;\n\t\t\tx2 = room1.right < room2.right ? room1.right : room2.right;\n\t\t\tx1 = x2 = Random.range(x1, x2);\n\t\t}\n\t\tfield[y1][x1] |= Flag.Route | door;\n\t\tfield[y2][x2] |= Flag.Route | door;\n\t\t++y1;\n\t\t--y2;\n\t\tlet y = y1;\n\t\tfor (; ; ++y) {\n\t\t\tfield[y][x1] |= Flag.Route;\n\t\t\tif (field[y][x1] & Flag.Border)\n\t\t\t\tbreak;\n\t\t}\n\t\tconst border = y;\n\t\tfor (; y <= y2; ++y)\n\t\t\tfield[y][x2] |= Flag.Route;\n\t\tif (x1 > x2)\n\t\t\t[x1, x2] = [x2, x1];\n\t\tfor (let x = x1; x <= x2; ++x)\n\t\t\tfield[border][x] |= Flag.Route;\n\t}\n\n\troom1.connectedRoom.push(room2.id);\n\troom2.connectedRoom.push(room1.id);\n}","import Random from '/src/random.js';\nimport Flag from \"../tile-flags.js\";\nimport * as Room from \"../room/build.js\";\n\nexport default function splitRegion(maze, x1, y1, x2, y2) {\n\tconst w = x2 - x1;\n\tconst h = y2 - y1;\n\n\tconst cellW = w / 3 | 0;\n\tconst cellH = h / 3 | 0;\n\n\tconst borderV1 = x1 + cellW;\n\tconst borderV2 = x2 - cellW;\n\tconst borderH1 = y1 + cellH;\n\tconst borderH2 = y2 - cellH;\n\n\tconst regions = [\n\t\t[x1, y1, borderV1, borderH1],\n\t\t[borderV1, y1, borderV2, borderH1],\n\t\t[borderV2, y1, x2, borderH1],\n\t\t[x1, borderH1, borderV1, borderH2],\n\t\t[borderV1, borderH1, borderV2, borderH2],\n\t\t[borderV2, borderH1, x2, borderH2],\n\t\t[x1, borderH2, borderV1, y2],\n\t\t[borderV1, borderH2, borderV2, y2],\n\t\t[borderV2, borderH2, x2, y2],\n\t];\n\n\tfor (; ;)\n\t\ttry {\n\t\t\tfor (let x = x1; x <= x2; ++x) {\n\t\t\t\tmaze.field[borderH1][x] |= Flag.Border;\n\t\t\t\tmaze.field[borderH2][x] |= Flag.Border;\n\t\t\t}\n\t\t\tfor (let y = y1; y <= y2; ++y) {\n\t\t\t\tmaze.field[y][borderV1] |= Flag.Border;\n\t\t\t\tmaze.field[y][borderV2] |= Flag.Border;\n\t\t\t}\n\n\t\t\tconnectAllRooms(maze, setupRooms(maze, regions));\n\t\t\tbreak;\n\t\t} catch (e) {\n\t\t\tconsole.debug(e.stack);\n\t\t\tmaze.clear();\n\t\t}\n}\n\n/**\n * Set up a room in each of the divided cells.\n * @param {*} maze \n * @param {*} regions \n * @returns \n */\nfunction setupRooms(maze, regions) {\n\t// cell no:\n\t//  0|1|2\n\t//  -+-+-\n\t//  3|4|5\n\t//  -+-+-\n\t//  6|7|8\n\tconst cells = Random.shuffle([0, 1, 2, 3, 4, 5, 6, 7, 8]);\n\n\t// There are up to four cells with no rooms.\n\tcells.length = Random.range(cells.length - 4, cells.length);\n\n\tconst horizonGroup = [\n\t\t[1, 2], [0, 2], [0, 1],\n\t\t[4, 5], [3, 5], [3, 4],\n\t\t[7, 8], [6, 8], [6, 7],\n\t];\n\tconst connectionTarget = [\n\t\t[[1, 2], [3, 6]], [[0], [2], [4, 7]], [[1, 0], [5, 8]],\n\t\t[[4, 5], [0], [6]], [[3], [5], [1], [7]], [[4, 3], [2], [8]],\n\t\t[[7, 8], [3, 0]], [[6], [8], [4, 1]], [[7, 6], [5, 2]],\n\t];\n\n\tconst rooms = {};\n\tfor (const no of cells) {\n\t\tconst region = regions[no];\n\t\tconst nodeNo = readyRoom(maze, region[0], region[1], region[2], region[3]);\n\t\tconst data = maze.getRoomByNodeNo(nodeNo);\n\t\trooms[no] = {\n\t\t\tcellNo: no,\n\t\t\tid: data.id,\n\t\t\tdata,\n\t\t\thorizonGroup: horizonGroup[no],\n\t\t\tconnectionTarget: connectionTarget[no]\n\t\t};\n\t}\n\treturn rooms;\n}\n\n/**\n * Create a room that fits within the specified coordinates.\n * @param {*} maze \n * @param {*} x1 \n * @param {*} y1 \n * @param {*} x2 \n * @param {*} y2 \n * @returns node-number\n */\nfunction readyRoom(maze, x1, y1, x2, y2) {\n\t[x1, y1, x2, y2] = Room.adjustRect(x1, y1, x2, y2);\n\tRoom.build(maze.field, x1, y1, x2, y2);\n\treturn maze.addRoom(x1, y1, x2, y2);\n}\n\n/**\n * Connecting the all rooms.\n * @param {*} maze \n * @param {*} rooms \n */\nfunction connectAllRooms(maze, rooms) {\n\tconst targetChoice = (rooms, room) => {\n\t\tconst result = [];\n\t\tlet connectedAlready = false;\n\t\tfor (const target of room.connectionTarget)\n\t\t\tfor (const cellNo of target)\n\t\t\t\tif (cellNo in rooms) {\n\t\t\t\t\tconst targetRoom = rooms[cellNo];\n\t\t\t\t\tif (!targetRoom.data.isConnected(room.data.id))\n\t\t\t\t\t\tresult.push({ cellNo, id: targetRoom.id });\n\t\t\t\t\telse connectedAlready = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\tif (!result.length) {\n\t\t\tif (connectedAlready)\n\t\t\t\treturn undefined;\n\t\t\tthrow new TypeError(\"No connection cell.\");\n\t\t}\n\t\treturn Random.randomValue(result);\n\t};\n\tconst connect = room => {\n\t\tconst choice = targetChoice(rooms, room);\n\t\tif (!choice)\n\t\t\treturn false;\n\t\tconst dir = (room.horizonGroup.indexOf(choice.cellNo) != -1) ? Room.Direction.Horizon : Room.Direction.Vertical;\n\t\tconnectRoom(maze, room.id, choice.id, dir);\n\t\t// console.debug(`connect cell: ${room.cellNo} - ${choice.cellNo}`);\n\t\treturn true;\n\t};\n\n\t// console.groupCollapsed(\"classic field\");\n\tfor (const room of Object.values(rooms))\n\t\tconnect(room);\n\t// console.groupEnd();\n\n\t// Measures for unconnected room groups.\n\tconst searchCellByRoomId = id => {\n\t\tfor (const room of Object.values(rooms))\n\t\t\tif (id == room.data.id)\n\t\t\t\treturn room.cellNo;\n\t\tthrow new RangeError(\"Not found cell.\")\n\t};\n\tconst recursiveConnection = (group, data) => {\n\t\tfor (const id of data.connectedRoom) {\n\t\t\tconst cellNo = searchCellByRoomId(id);\n\t\t\tif (group.indexOf(cellNo) != -1)\n\t\t\t\tcontinue;\n\t\t\tgroup.push(cellNo);\n\t\t\trecursiveConnection(group, maze.getRoom(id));\n\t\t}\n\t};\n\tconst initCellGroup = () => {\n\t\tconst room = Object.values(rooms)[0];\n\t\tconst group = [room.cellNo];\n\t\trecursiveConnection(group, room.data);\n\t\treturn group;\n\t};\n\n\t// console.group(\"classic field - unconnected\");\n\tconst group = initCellGroup();\n\tfor (const cellNo of Random.shuffle(Object.keys(rooms))) {\n\t\tif (group.indexOf(cellNo | 0) == -1) {\n\t\t\tconst room = rooms[cellNo];\n\t\t\tif (!connect(room))\n\t\t\t\tcontinue;\n\t\t\tgroup.push(cellNo | 0);\n\t\t\trecursiveConnection(group, room.data);\n\t\t}\n\t}\n\t// console.groupEnd();\n}\n\n/**\n * Connecting the two rooms.\n * @param {*} maze \n * @param {*} room1 first room id\n * @param {*} room2 second room id\n * @param {*} dir \n */\nfunction connectRoom(maze, room1, room2, dir) {\n\tlet r1 = maze.getRoom(room1);\n\tlet r2 = maze.getRoom(room2);\n\tlet exchange = false;\n\n\tif (dir == Room.Direction.Horizon) {\n\t\tconst c1 = (r1.right - r1.left) / 2 + r1.left;\n\t\tconst c2 = (r2.right - r2.left) / 2 + r2.left;\n\t\texchange = c2 < c1;\n\t} else if (dir == Room.Direction.Vertical) {\n\t\tconst c1 = (r1.bottom - r1.top) / 2 + r1.top;\n\t\tconst c2 = (r2.bottom - r2.top) / 2 + r2.top;\n\t\texchange = c2 < c1;\n\t}\n\n\tif (exchange)\n\t\t[r1, r2] = [r2, r1];\n\n\tRoom.connect(maze.field, r1, r2, dir);\n}\n","import Random from '/src/random.js';\nimport Flag from \"../tile-flags.js\";\nimport * as Room from \"../room/build.js\";\n\nexport default function splitRegion(maze, x1, y1, x2, y2, depth = 0) {\n\tconst w = x2 - x1;\n\tconst h = y2 - y1;\n\n\tif (w < 10 || h < 10 || Random.P(depth))\n\t\treturn readyRoom(maze, x1, y1, x2, y2);\n\n\t++depth;\n\n\tif (w >= h) {\n\t\tconst border = Random.range(x1 + 5, x2 - 5);\n\t\tconst room1 = splitRegion(maze, x1, y1, border - 1, y2, depth);\n\t\tconst room2 = splitRegion(maze, border + 1, y1, x2, y2, depth);\n\n\t\tif (!room1 && !room2) return null;\n\t\telse if (!room1) return room2;\n\t\telse if (!room2) return room1;\n\n\t\t//connect\n\t\tconst i = Random.range(room1[1] + 1, room1[3] - 1);\n\t\tconst j = Random.range(room2[1] + 1, room2[3] - 1);\n\t\tconst d = j > i ? 1 : -1;\n\n\t\tfor (let x = room1[2]; x <= border; ++x)\n\t\t\tmaze.field[i][x] |= Flag.Route;\n\t\tmaze.field[i][room1[2]] |= Flag.Door;\n\t\tfor (let x = border; x <= room2[0]; ++x)\n\t\t\tmaze.field[j][x] |= Flag.Route;\n\t\tmaze.field[j][room2[0]] |= Flag.Door;\n\t\tif (j != i)\n\t\t\tfor (let y = i; y != j; y += d)\n\t\t\t\tmaze.field[y][border] |= Flag.Route;\n\n\t\treturn Random.coinToss ? room1 : room2;\n\t} else {\n\t\tconst border = Random.range(y1 + 5, y2 - 5);\n\t\tconst room1 = splitRegion(maze, x1, y1, x2, border - 1, depth);\n\t\tconst room2 = splitRegion(maze, x1, border + 1, x2, y2, depth);\n\n\t\tif (!room1 && !room2) return null;\n\t\telse if (!room1) return room2;\n\t\telse if (!room2) return room1;\n\n\t\t//connect\n\t\tconst i = Random.range(room1[0] + 1, room1[2] - 1);\n\t\tconst j = Random.range(room2[0] + 1, room2[2] - 1);\n\t\tconst d = j > i ? 1 : -1;\n\n\t\tfor (let y = room1[3]; y <= border; ++y)\n\t\t\tmaze.field[y][i] |= Flag.Route;\n\t\tmaze.field[room1[3]][i] |= Flag.Door;\n\t\tfor (let y = border; y <= room2[1]; ++y)\n\t\t\tmaze.field[y][j] |= Flag.Route;\n\t\tmaze.field[room2[1]][j] |= Flag.Door;\n\t\tif (j != i)\n\t\t\tfor (let x = i; x != j; x += d)\n\t\t\t\tmaze.field[border][x] |= Flag.Route;\n\n\t\treturn Random.coinToss ? room1 : room2;\n\t}\n}\n\nfunction readyRoom(maze, x1, y1, x2, y2) {\n\tconst width = x2 - x1;\n\tconst height = y2 - y1;\n\tif (width < 4 || height < 4) {\n\t\tconsole.error(`failed makeRoom: width:${width}, height:${height} [${x1}, ${y1}]-[${x2}, ${y2}]`);\n\t\treturn null;\n\t}\n\n\tconst w = (width > 4) ? Random.range(4, width) : width;\n\tconst h = (height > 4) ? Random.range(4, height) : height;\n\tconst x = Random.range(0, width - w) + x1;\n\tconst y = Random.range(0, height - h) + y1;\n\tRoom.build(maze.field, x + 1, y + 1, x + w - 1, y + h - 1);\n\treturn [x, y, x + w, y + h];\n}\n","import Random from '/src/random.js';\nimport Flag from \"../tile-flags.js\";\nimport * as Room from \"../room/build.js\";\n\nexport default function splitRegion(maze, x1, y1, x2, y2, depth = 0) {\n\tif (depth > 3)\n\t\treturn readyRoom(maze, x1, y1, x2, y2);\n\n\tconst v = Random.value;\n\tconst w = x2 - x1;\n\tconst h = y2 - y1;\n\n\tif (w >= h) {\n\t\tif (w < 15)\n\t\t\treturn readyRoom(maze, x1, y1, x2, y2);\n\n\t\tconst border = ((w - 10) * v | 0) + 5 + x1;\n\t\tconst room1 = splitRegion(maze, x1, y1, border, y2, depth + 1);\n\t\tconst room2 = splitRegion(maze, border, y1, x2, y2, depth + 1);\n\n\t\tfor (let y = y1; y <= y2; ++y)\n\t\t\tmaze.field[y][border] |= Flag.Border;\n\n\t\treturn connectRoom(maze, room1, room2, Room.Direction.Horizon);\n\t} else {\n\t\tif (h < 15)\n\t\t\treturn readyRoom(maze, x1, y1, x2, y2);\n\n\t\tconst border = ((h - 10) * v | 0) + 5 + y1;\n\t\tconst room1 = splitRegion(maze, x1, y1, x2, border, depth + 1);\n\t\tconst room2 = splitRegion(maze, x1, border, x2, y2, depth + 1);\n\n\t\tfor (let x = x1; x <= x2; ++x)\n\t\t\tmaze.field[border][x] |= Flag.Border;\n\n\t\treturn connectRoom(maze, room1, room2, Room.Direction.Vertical);\n\t}\n}\n\n/**\n * Create a room that fits within the specified coordinates.\n * \n * @param {*} maze \n * @param {*} x1 \n * @param {*} y1 \n * @param {*} x2 \n * @param {*} y2 \n * @returns node-number\n */\nfunction readyRoom(maze, x1, y1, x2, y2) {\n\t[x1, y1, x2, y2] = Room.adjustRect(x1, y1, x2, y2);\n\tRoom.build(maze.field, x1, y1, x2, y2);\n\treturn maze.addRoom(x1, y1, x2, y2);\n}\n\n/**\n * Connecting the two rooms.\n * @param {*} maze \n * @param {*} room1 first node no\n * @param {*} room2 second node no\n * @param {*} dir \n * @returns node-number\n */\nfunction connectRoom(maze, room1, room2, dir) {\n\tlet node1 = maze.getRoomNode(room1);\n\tlet node2 = maze.getRoomNode(room2);\n\n\tconst nodeNo = maze.addRoomNode(new Room.Node(dir, room1, room2));\n\tnode1.parent = nodeNo;\n\tnode2.parent = nodeNo;\n\n\twhile (node1.dir != Room.Direction.Free)\n\t\tnode1 = maze.getRoomNode(node1.dir == dir ? node1.room2 : Random.coinToss ? node1.room1 : node1.room2);\n\twhile (node2.dir != Room.Direction.Free)\n\t\tnode2 = maze.getRoomNode(node2.dir == dir ? node2.room1 : Random.coinToss ? node2.room1 : node2.room2);\n\tconst r1 = maze.getRoom(node1.room1);\n\tconst r2 = maze.getRoom(node2.room1);\n\n\tRoom.connect(maze.field, r1, r2, dir, Flag.Door);\n\n\treturn nodeNo;\n}\n","import Random from \"./random.js\";\n\nexport default class PerlinNoise {\n\tstatic get makePermutation() {\n\t\tconst base = [...Array(256)].map((v, i) => i);\n\t\tfor (const i in base) {\n\t\t\tconst j = Random.value * base.length | 0;\n\t\t\t[base[i], base[j]] = [base[j], base[i]];\n\t\t}\n\t\treturn base.concat(base);\n\t}\n\n\tstatic value(permutation, x, y = 0, z = 0) {\n\t\tconst fade = t => t * t * t * (t * (t * 6 - 15) + 10);\n\t\tconst lerp = (t, a, b) => a + t * (b - a);\n\t\tconst grad = (hash, x, y, z) => {\n\t\t\thash &= 0xf;\n\t\t\tconst u = hash < 8 ? x : y;\n\t\t\tconst v = hash < 4 ? y : hash == 12 || hash == 14 ? x : z;\n\t\t\treturn ((hash & 0x1) === 0 ? u : -u) + ((hash & 0x2) === 0 ? v : -v);\n\t\t};\n\n\t\tconst xi = x & 0xff;\n\t\tconst yi = y & 0xff;\n\t\tconst zi = z & 0xff;\n\t\tconst xf = x - (x | 0);\n\t\tconst yf = y - (y | 0);\n\t\tconst zf = z - (z | 0);\n\t\tconst u = fade(xf);\n\t\tconst v = fade(yf);\n\t\tconst w = fade(zf);\n\n\t\tconst p = permutation;\n\t\tconst A = p[xi + 0] + yi, AA = p[A] + zi, AB = p[A + 1] + zi;\n\t\tconst B = p[xi + 1] + yi, BA = p[B] + zi, BB = p[B + 1] + zi;\n\n\t\treturn lerp(w,\n\t\t\tlerp(v,\n\t\t\t\tlerp(u, grad(p[AA], xf, yf, zf), grad(p[BA], xf - 1, yf, zf)),\n\t\t\t\tlerp(u, grad(p[AB], xf, yf - 1, zf), grad(p[BB], xf - 1, yf - 1, zf))\n\t\t\t),\n\t\t\tlerp(v,\n\t\t\t\tlerp(u, grad(p[AA + 1], xf, yf, zf - 1), grad(p[BA + 1], xf - 1, yf, zf - 1)),\n\t\t\t\tlerp(u, grad(p[AB + 1], xf, yf - 1, zf - 1), grad(p[BB + 1], xf - 1, yf - 1, zf - 1))\n\t\t\t)\n\t\t);\n\t}\n\n\tstatic octaveValue(permutation, x, y = 0, z = 0, octaves = 1, persistence = 0.5) {\n\t\tlet total = 0;\n\t\tlet frequency = 1;\n\t\tlet amplitude = 1;\n\t\tlet maxValue = 0;\n\n\t\tfor (let i = 0; i < octaves; ++i) {\n\t\t\ttotal += this.value(permutation, x * frequency, y * frequency, z * frequency) * amplitude;\n\t\t\tmaxValue += amplitude;\n\t\t\tamplitude *= persistence;\n\t\t\tfrequency *= 2;\n\t\t}\n\n\t\treturn total / maxValue;\n\t}\n}","import Flag from \"./tile-flags.js\";\nimport * as Room from \"./room/build.js\";\nimport SplitterClassic from \"./region-splitter/classic.js\";\nimport SplitterRough from \"./region-splitter/rough.js\";\nimport Splitter from \"./region-splitter/standard.js\";\nimport PerlinNoise from \"./perlin-noise.js\";\n\nexport const BuildType = Object.freeze({\n\tStandard: Symbol(\"Standard\"),\n\tClassic: Symbol(\"Classic\"),\n\tRough: Symbol(\"Rough\"),\n\tBigRoom: Symbol(\"BigRoom\"),\n});\n\nexport default class Maze {\n\t#width = 0;\n\t#height = 0;\n\t#field = null;\n\n\t#rooms = [];\n\t#roomTree = [];\n\n\tconstructor(width, height) {\n\t\tthis.#width = width;\n\t\tthis.#height = height;\n\t\tthis.#field = new Array(height);\n\t\tfor (let y = 0; y < height; ++y)\n\t\t\tthis.#field[y] = new Array(width);\n\t}\n\n\tget width() { return this.#width; }\n\tget height() { return this.#height; }\n\tget field() { return this.#field; }\n\tget(x, y) { return this.#field[y][x]; }\n\tat(offset) { return this.#field[offset / this.#width | 0][offset % this.#width]; }\n\n\tbuild(type = BuildType.Standard) {\n\t\tthis.clear();\n\n\t\tswitch (type) {\n\t\t\tcase BuildType.Classic: SplitterClassic(this, 0, 0, this.#width - 1, this.#height - 1); break;\n\t\t\tcase BuildType.Rough: SplitterRough(this, 0, 0, this.#width - 1, this.#height - 1); break;\n\t\t\tcase BuildType.BigRoom: Room.roughRoom(this.field, 1, 1, this.#width - 2, this.#height - 2); break;\n\t\t\tdefault: Splitter(this, 0, 0, this.#width - 1, this.#height - 1); break;\n\t\t}\n\t}\n\n\theightMap(wScale = 4, hScale = 4, upBorder = .25, upTile = Flag.Grass, downBorder = -.25, downTile = Flag.Water) {\n\t\tconst table = PerlinNoise.makePermutation;\n\t\tfor (let y = 0; y < this.#height; ++y)\n\t\t\tfor (let x = 0; x < this.#width; ++x)\n\t\t\t\tif (this.#field[y][x] & (Flag.Route | Flag.Room)) {\n\t\t\t\t\tconst n = PerlinNoise.octaveValue(table, x / this.#width * wScale, y / this.#height * hScale, 0, 4);\n\t\t\t\t\tif (n > upBorder) this.#field[y][x] |= upTile;\n\t\t\t\t\telse if (n < downBorder) this.#field[y][x] |= downTile;\n\t\t\t\t}\n\t}\n\n\tclear() {\n\t\tthis.#rooms = [];\n\t\tthis.#roomTree = [];\n\t\tfor (let y = 0; y < this.#height; ++y)\n\t\t\tfor (let x = 0; x < this.#width; ++x)\n\t\t\t\tthis.#field[y][x] = 0;\n\t}\n\n\tgetRoom(id) { return this.#rooms[id]; }\n\taddRoom(x1, y1, x2, y2) {\n\t\tconst id = this.#rooms.length;\n\t\tthis.#rooms.push(new Room.Data(id, x1, y1, x2, y2));\n\t\treturn this.addRoomNode(new Room.Node(Room.Direction.Free, id));\n\t}\n\n\tgetRoomNode(no) { return this.#roomTree[no]; }\n\taddRoomNode(roomNode) {\n\t\tconst nodeNo = this.#roomTree.length;\n\t\tthis.#roomTree.push(roomNode);\n\t\treturn nodeNo;\n\t}\n\n\tgetRoomByNodeNo(nodeNo) {\n\t\tconst node = this.getRoomNode(nodeNo);\n\t\tif (node.dir != Room.Direction.Free)\n\t\t\tthrow new TypeError(\"Not room node.\");\n\t\treturn this.getRoom(node.room1);\n\t}\n}\n","import Flag from \"./tile-flags.js\";\nimport Maze, { BuildType } from \"./maze.js\";\n\nexport default { Flag, Maze, BuildType };\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","freeze","Route","Room","Door","Border","Grass","Water","Random","value","Math","random","coinToss","this","static","max","int0","min","int1","percent","range","array","i","length","j","Data","constructor","id","left","top","right","bottom","connectedRoom","step","isConnected","indexOf","Node","dir","room1","room2","parent","build","field","x1","y1","x2","y2","y","x","adjustRect","w","h","ww","wh","connect","door","row1","border","row2","push","setupRooms","maze","regions","cells","shuffle","horizonGroup","connectionTarget","rooms","no","region","nodeNo","readyRoom","data","getRoomByNodeNo","cellNo","addRoom","connectAllRooms","room","choice","result","connectedAlready","target","targetRoom","TypeError","randomValue","targetChoice","connectRoom","values","searchCellByRoomId","RangeError","recursiveConnection","group","getRoom","initCellGroup","keys","r1","r2","exchange","c1","depth","P","width","height","console","error","d","v","node1","getRoomNode","node2","addRoomNode","PerlinNoise","makePermutation","base","Array","map","concat","permutation","z","fade","t","lerp","a","b","grad","hash","u","xi","yi","zi","xf","yf","zf","p","A","AA","AB","B","BA","BB","octaves","persistence","total","frequency","amplitude","maxValue","BuildType","Standard","Symbol","Classic","Rough","BigRoom","Flag","at","offset","type","clear","cellW","cellH","borderV1","borderV2","borderH1","borderH2","e","debug","stack","heightMap","wScale","hScale","upBorder","upTile","downBorder","downTile","table","n","octaveValue","roomNode","node"],"sourceRoot":""}